// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Data;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240804134649_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("WebApplication2.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("LeagueId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("TEXT");

                    b.Property<float?>("Result")
                        .HasColumnType("REAL");

                    b.Property<int>("Team1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Team2Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("Team1Id");

                    b.HasIndex("Team2Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("WebApplication2.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ParseType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Parsed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("WebApplication2.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("WebApplication2.Models.Stats.HeadToHeadBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<float>("Draws")
                        .HasColumnType("REAL");

                    b.Property<float>("DryMatches")
                        .HasColumnType("REAL");

                    b.Property<float>("GoalBoth")
                        .HasColumnType("REAL");

                    b.Property<float>("Goals")
                        .HasColumnType("REAL");

                    b.Property<float>("GoalsGame")
                        .HasColumnType("REAL");

                    b.Property<float>("GoalsGameLost")
                        .HasColumnType("REAL");

                    b.Property<float>("GoalsLost")
                        .HasColumnType("REAL");

                    b.Property<float>("Loses")
                        .HasColumnType("REAL");

                    b.Property<float>("Matches")
                        .HasColumnType("REAL");

                    b.Property<float>("RestHours")
                        .HasColumnType("REAL");

                    b.Property<float>("TotalLess25")
                        .HasColumnType("REAL");

                    b.Property<float>("TotalMore25")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<float>("Wins")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("HeadToHeadBase");
                });

            modelBuilder.Entity("WebApplication2.Models.Stats.HeadToHeadInGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Corner")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<float>("Offsides")
                        .HasColumnType("REAL");

                    b.Property<float>("Possession")
                        .HasColumnType("REAL");

                    b.Property<float>("RedCards")
                        .HasColumnType("REAL");

                    b.Property<float>("ShotsOnTarget")
                        .HasColumnType("REAL");

                    b.Property<float>("Strikes")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<float>("Violations")
                        .HasColumnType("REAL");

                    b.Property<float>("YellowCards")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("HeadToHeadInGame");
                });

            modelBuilder.Entity("WebApplication2.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("HeadToHeadBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadToHeadInGameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadToHeadInGameOpponentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HeadToHeadBaseId");

                    b.HasIndex("HeadToHeadInGameId");

                    b.HasIndex("HeadToHeadInGameOpponentId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("WebApplication2.Models.Game", b =>
                {
                    b.HasOne("WebApplication2.Models.League", "League")
                        .WithMany("Games")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.Team", "Team1")
                        .WithMany()
                        .HasForeignKey("Team1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.Team", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Team1");

                    b.Navigation("Team2");
                });

            modelBuilder.Entity("WebApplication2.Models.Team", b =>
                {
                    b.HasOne("WebApplication2.Models.Stats.HeadToHeadBase", "HeadToHeadBase")
                        .WithMany()
                        .HasForeignKey("HeadToHeadBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.Stats.HeadToHeadInGame", "HeadToHeadInGame")
                        .WithMany()
                        .HasForeignKey("HeadToHeadInGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.Stats.HeadToHeadInGame", "HeadToHeadInGameOpponent")
                        .WithMany()
                        .HasForeignKey("HeadToHeadInGameOpponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeadToHeadBase");

                    b.Navigation("HeadToHeadInGame");

                    b.Navigation("HeadToHeadInGameOpponent");
                });

            modelBuilder.Entity("WebApplication2.Models.League", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
